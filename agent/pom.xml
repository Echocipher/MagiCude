<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.tiji</groupId>
        <artifactId>MagiCude</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <artifactId>agent</artifactId>

    <properties>
        <java.version>15</java.version>
        <!--docker私服地址-->
        <docker.repository>192.168.12.138:5000</docker.repository>
        <dockerfile-maven-plugin.version>1.4.13</dockerfile-maven-plugin.version>
        <jep.version>3.9.1</jep.version>
        <gson.version>2.8.6</gson.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.tiji</groupId>
            <artifactId>common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>


        <!-- https://mvnrepository.com/artifact/net.sourceforge.htmlunit/htmlunit -->
<!--        <dependency>-->
<!--            <groupId>net.sourceforge.htmlunit</groupId>-->
<!--            <artifactId>htmlunit</artifactId>-->
<!--            <version>2.45.0</version>-->
<!--        </dependency>-->
        <dependency>
            <groupId>com.tiji</groupId>
            <artifactId>plugin</artifactId>
            <version>1.0-SNAPSHOT</version>
            <scope>compile</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/black.ninia/jep -->
        <dependency>
            <groupId>black.ninia</groupId>
            <artifactId>jep</artifactId>
            <version>${jep.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${gson.version}</version>
        </dependency>
    </dependencies>


    <build>

        <finalName>agentapp</finalName>
        <!--		本机运行时要去掉resources标签-->
<!--        <resources>-->
<!--            <resource>-->
<!--                <directory>src/main/resources</directory>-->
<!--                <excludes>-->
<!--                    <exclude>application.yml</exclude>-->
<!--                </excludes>-->
<!--            </resource>-->
<!--        </resources>-->

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>

            </plugin>
            <!-- docker 的 maven 插件，https://github.com/spotify/dockerfile-maven -->
            <plugin>

                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${dockerfile-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <!--如果package时不想用docker打包,就注释掉这个goal-->
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>

                    </execution>
                </executions>
                <configuration>

                    <repository>${docker.repository}/${project.artifactId}</repository>
                    <tag>${project.version}</tag>
                    <buildArgs>
                        <!--提供参数向Dockerfile传递-->
                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>

                </configuration>

            </plugin>
        </plugins>
    </build>
</project>
